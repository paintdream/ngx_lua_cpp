CMAKE_MINIMUM_REQUIRED (VERSION 3.1)
PROJECT (ngx_lua_cpp)

SET (STDLIB stdc++)
STRING (REPLACE "/" "\\" LOCAL_SOURCE_DIR "${PROJECT_SOURCE_DIR}")
SET_PROPERTY (GLOBAL PROPERTY USE_FOLDERS ON)
SET (CMAKE_CXX_STANDARD 20)

MESSAGE (STATUS "Current platform: ${CMAKE_GENERATOR_PLATFORM}")

IF (NOT MSVC)
	ADD_DEFINITIONS(-fPIC)
ENDIF (NOT MSVC)

SET (USE_LUA_VERSION "LuaJIT" CACHE STRING "Lua version")
SET_PROPERTY (CACHE USE_LUA_VERSION PROPERTY STRINGS "LuaJIT" "5.1" "5.2" "5.3" "5.4")
SET (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")
INCLUDE_DIRECTORIES ("${PROJECT_BINARY_DIR}")
INCLUDE_DIRECTORIES ("${PROJECT_SOURCE_DIR}/ref")

# BUILD ngx_lua_cpp
FILE (GLOB_RECURSE NGX_LUA_CPP_SRC
	"${PROJECT_SOURCE_DIR}/src/*.h"
	"${PROJECT_SOURCE_DIR}/src/*.cpp"
	"${PROJECT_SOURCE_DIR}/src/*.inl"
)

FOREACH (FILE ${NGX_LUA_CPP_SRC}) 
	GET_FILENAME_COMPONENT(PARENT_DIR "${FILE}" PATH)

	# skip src or include and changes /'s to \\'s
	STRING (REGEX REPLACE "(\\./)?(src|include)/?" "" GROUP "${PARENT_DIR}")
	STRING (REPLACE "/" "\\" GROUP "${GROUP}")
	STRING (REPLACE "${LOCAL_SOURCE_DIR}" "" GROUP "${GROUP}")
	SOURCE_GROUP ("${GROUP}" FILES "${FILE}")
ENDFOREACH (FILE ${NGX_LUA_CPP_SRC})

IF (${USE_LUA_VERSION} STREQUAL "LuaJIT")
	FIND_PACKAGE (LuaJIT)
ELSE (${USE_LUA_VERSION} STREQUAL "LuaJIT")
	FIND_PACKAGE (Lua ${USE_LUA_VERSION} REQUIRED)
ENDIF (${USE_LUA_VERSION} STREQUAL "LuaJIT")

IF (LUA_FOUND OR LUAJIT_FOUND)
	MESSAGE (STATUS "Find lua version " ${USE_LUA_VERSION})
	FILE (GLOB_RECURSE LUA_CORE_SRC
		"${LUA_INCLUDE_DIR}/*.h"
		"${LUA_INCLUDE_DIR}/*.hpp"
	)

	SET (LUA_CORE_LIB ${LUA_LIBRARIES})
ELSE (LUA_FOUND OR LUAJIT_FOUND)
	MESSAGE (FATAL_ERROR "Unable to find lua with version " ${USE_LUA_VERSION})
ENDIF (LUA_FOUND OR LUAJIT_FOUND)

SET (NGX_LUA_CPP_LIBNAME ngx_lua_cpp)
ADD_LIBRARY (${NGX_LUA_CPP_LIBNAME} SHARED ${NGX_LUA_CPP_SRC} ${LUA_CORE_SRC})
TARGET_COMPILE_DEFINITIONS (${NGX_LUA_CPP_LIBNAME} PUBLIC NGX_LUA_CPP_IMPORT)
TARGET_COMPILE_DEFINITIONS (${NGX_LUA_CPP_LIBNAME} PRIVATE NGX_LUA_CPP_EXPORT)

IF (MSVC)
	# Default to statically-linked runtime.
	IF (BUILD_STANDALONE)
		SET (MSVC_RUNTIME "static")
	ELSE (BUILD_STANDALONE)
		SET (MSVC_RUNTIME "dynamic")
	ENDIF (BUILD_STANDALONE)
	# SET compiler options.
	SET (variables
		CMAKE_C_FLAGS_DEBUG
		CMAKE_C_FLAGS_MINSIZEREL
		CMAKE_C_FLAGS_RELEASE
		CMAKE_C_FLAGS_RELWITHDEBINFO
		CMAKE_CXX_FLAGS_DEBUG
		CMAKE_CXX_FLAGS_MINSIZEREL
		CMAKE_CXX_FLAGS_RELEASE
		CMAKE_CXX_FLAGS_RELWITHDEBINFO
	)

	# ADD_DEFINITIONS (-D_HAS_EXCEPTIONS=0)
	IF (${MSVC_RUNTIME} STREQUAL "static")
		# disable RTTI & Exceptions
		SET (CMAKE_CXX_FLAGS, "/DWIN32 /D_WINDOWS /W3")
		MESSAGE (STATUS
			"MSVC -> forcing use of statically-linked runtime."
		)
		FOREACH (variable ${variables})
			IF (${variable} MATCHES "/MD")
				string(REGEX REPLACE "/MD" "/MT" ${variable} "${${variable}}")
			ENDIF ()
		ENDFOREACH ()
	ELSE ()
		MESSAGE(STATUS
			"MSVC -> forcing use of dynamically-linked runtime."
		)
		FOREACH (variable ${variables})
			IF (${variable} MATCHES "/MT")
				string(REGEX REPLACE "/MT" "/MD" ${variable} "${${variable}}")
			ENDIF ()
		ENDFOREACH ()
	ENDIF ()
ENDIF ()

TARGET_INCLUDE_DIRECTORIES (${NGX_LUA_CPP_LIBNAME} PUBLIC "${LUA_INCLUDE_DIR}")
TARGET_COMPILE_DEFINITIONS (${NGX_LUA_CPP_LIBNAME} PUBLIC USE_LUA_LIBRARY)

IF (MSVC)
	TARGET_COMPILE_DEFINITIONS(${NGX_LUA_CPP_LIBNAME} PRIVATE LUA_BUILD_AS_DLL)
	TARGET_LINK_LIBRARIES (${NGX_LUA_CPP_LIBNAME} ${LUA_CORE_LIB})
ELSE (MSVC)
	TARGET_LINK_LIBRARIES (${NGX_LUA_CPP_LIBNAME} m dl stdc++ pthread ${LUA_CORE_LIB})
ENDIF (MSVC)
